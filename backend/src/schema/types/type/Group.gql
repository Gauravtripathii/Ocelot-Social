enum _GroupOrdering {
  id_asc
  id_desc
  name_asc
  name_desc
  slug_asc
  slug_desc
  locationName_asc
  locationName_desc
  about_asc
  about_desc
  createdAt_asc
  createdAt_desc
  updatedAt_asc
  updatedAt_desc
}

type Group {
  id: ID!
  name: String! # title
  slug: String!

  createdAt: String!
  updatedAt: String!
  deleted: Boolean
  disabled: Boolean

  avatar: Image @relation(name: "AVATAR_IMAGE", direction: "OUT")

  about: String # goal
  description: String!
  groupType: GroupType!
  actionRadius: GroupActionRadius!

  location: Location @cypher(statement: "MATCH (this)-[:IS_IN]->(l:Location) RETURN l")
  locationName: String

  categories: [Category] @relation(name: "CATEGORIZED", direction: "OUT")

  myRole: GroupMemberRole # if 'null' then the current user is no member
}


input _GroupFilter {
  AND: [_GroupFilter!]
  OR: [_GroupFilter!]
  name_contains: String
  slug_contains: String
  about_contains: String
  description_contains: String
  groupType_in: [GroupType!]
  actionRadius_in: [GroupActionRadius!]
  myRole_in: [GroupMemberRole!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

type Query {
  Group(
    isMember: Boolean # if 'undefined' or 'null' then all groups
    id: ID
    name: String
    slug: String
    createdAt: String
    updatedAt: String
    about: String
    description: String
    locationName: String
    first: Int
    offset: Int
    orderBy: [_GroupOrdering]
  ): [Group]

  GroupMembers(
    id: ID!
    first: Int
    offset: Int
    orderBy: [_UserOrdering]
    filter: _UserFilter
  ): [User]

  AvailableGroupTypes: [GroupType]!

  AvailableGroupActionRadii: [GroupActionRadius]!

  AvailableGroupMemberRoles: [GroupMemberRole]!
}

type Mutation {
  CreateGroup(
    id: ID
    name: String!
    slug: String
    avatar: ImageInput
    about: String
    description: String!
    groupType: GroupType!
    actionRadius: GroupActionRadius!
    categoryIds: [ID]
    locationName: String
  ): Group

  UpdateGroup(
    id: ID!
    name: String
    slug: String
    avatar: ImageInput
    locationName: String
    about: String
    description: String
  ): Group

  DeleteGroup(id: ID!): Group

  JoinGroup(
    id: ID!
    userId: ID!
  ): User

  ChangeGroupMemberRole(
    id: ID!
    userId: ID!
    roleInGroup: GroupMemberRole!
  ): User
}
